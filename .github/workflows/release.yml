# Test openMINDS MATLAB Toolbox across all supported releases of MATLAB, package toolbox, create release
# Adapted from: https://github.com/mathworks/climatedatastore/blob/main/.github/workflows/release.yml

name: Create new release

# Run workflow when a tag is created or it is triggered manually
on:
  push:
    tags: 
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number in major.minor.patch format, i.e 0.9.x'
        required: true
        type: string

jobs:
  # This workflow contains:
  # 1. a validation of the provided version number
  # 2. a matrixed test job run across MATLAB releases from R2021b to R2024b
  # 3. a reporting job that summarizes the tests, and updates release badge
  
  setup_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.version }}
      version_tag: ${{ steps.set_version.outputs.version_tag }}
    steps:
      - name: Check for retag
        if: ${{ contains(github.event.head_commit.message, '[skip-ci]') }}
        run: |
          echo "Error: Commit message contains [skip-ci], skipping."
          exit 1
          
      - name: Set version based on trigger type
        id: set_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # For manual trigger, use the input version
            VERSION="${{ github.event.inputs.version }}"
            # Validate format
            if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Error: Input for 'version' ('$VERSION') is not in the expected major.minor.patch format."
              exit 1
            fi
            VERSION_TAG="v$VERSION"
          else
            # For tag trigger, use the tag name
            VERSION_TAG="${{ github.ref_name }}"
            # Remove 'v' prefix if present for the version number
            VERSION="${VERSION_TAG#v}"
            
            # Validate format
            if [[ ! "$VERSION_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "Error: Tag name ('$VERSION_TAG') is not in the expected v*.*.* format."
              exit 1
            fi
          fi
          
          echo "Using version: $VERSION (tag: $VERSION_TAG)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_tag=$VERSION_TAG" >> $GITHUB_OUTPUT

  test:
    needs: [setup_version]
    strategy:
      fail-fast: false
      matrix:
        MATLABVersion: [R2021b, R2022a, R2022b, R2023a, R2023b, R2024a, R2024b]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      # Checks-out the repository under $GITHUB_WORKSPACE, so the job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up MATLAB
        uses: matlab-actions/setup-matlab@v2
        with:
          release: ${{ matrix.MATLABVersion }}

      # Runs all tests in the project.  Put results in a version specific subdirectory
      - name: Run tests
        uses: matlab-actions/run-command@v2
        with:
          command: |
            addpath(genpath("tools"));
            testToolbox('ReportSubdirectory',"${{ matrix.MATLABVersion }}", 'CreateBadge', false)     

      # Save the contents of the report directory from each release into an artifact.
      - name: Save report directory
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: reports-${{ matrix.MATLABVersion }}
          path: docs/reports
          
  # Report on what releases tested successfully.
  # Generate a draft release based on the tag
  # Recreate the tag with the final version of updated files
  release:
    needs: [test, setup_version]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.setup_version.outputs.version }}
      VERSION_TAG: ${{ needs.setup_version.outputs.version_tag }}
    
    steps:
      # Use deploy key to push back to protected branch
      - name: Checkout repository using deploy key
        uses: actions/checkout@v4
        with:
          ref: refs/heads/main
          ssh-key: ${{ secrets.DEPLOY_KEY }}

      - name: Set up MATLAB
        uses: matlab-actions/setup-matlab@v2

      # Copy all the reports down into the container
      - uses: actions/download-artifact@v4
        with:
          pattern: reports-*
          path: docs/reports
          merge-multiple: true

      # Generate the JSON for the releases tested badge
      - name: Generate tested with badge
        uses: matlab-actions/run-command@v2
        with:
          command: addpath(genpath("tools")), createTestedWithBadgeforToolbox("${{ env.VERSION_TAG }}")     

      # Publish test results from all the releases
      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          junit_files: "docs/reports/*/test-results.xml"

      # Package the MLTBX
      - name: Package toolbox
        uses: matlab-actions/run-command@v2
        with:
          command: addpath(genpath("tools")), packageToolbox("specific","${{ env.VERSION_TAG }}")     

      # Define the versionNumber using underscores, as this is used in the MLTBX
      - name: Set version number
        id: set_version
        run: |
          versionNumber=$(echo "${{ env.VERSION_TAG }}" | sed 's/\./_/g')
          echo "versionNumber=$versionNumber" >> $GITHUB_ENV

      # Save the MLTBX.
      - name: Save packaged toolbox
        uses: actions/upload-artifact@v4
        with:
          name: openMINDS_MATLAB_${{ env.versionNumber }}.mltbx
          path: releases/openMINDS_MATLAB_${{ env.versionNumber }}.mltbx

      - name: Update codemeta.json
        uses: matlab-actions/run-command@v2
        with:
          command: | 
            addpath(genpath("tools"));
            updateCodeMetaFile("${{ env.VERSION_TAG }}")

      # Commit the updated Contents.m
      - name: Commit updated Contents.m file
        continue-on-error: true
        run: |
          git config user.name "${{ github.workflow }} by ${{ github.actor }}"
          git config user.email "${{ secrets.COMMIT_EMAIL_ADDRESS }}"
          git status
          git add code/Contents.m
          git add codemeta.json
          git commit -m "Final checkins for release ${{ env.VERSION_TAG }}"
          git fetch
          git push

      # Commit the JSON for the MATLAB releases test badge to gh-badges branch
      - name: Checkout gh-badges branch
        uses: actions/checkout@v4
        with:
          ref: gh-badges
          path: gh-badges
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Push to gh-badges
        run: |
          mkdir -p gh-badges/.github/badges/${{ env.VERSION_TAG }}
          cp .github/badges/${{ env.VERSION_TAG }}/tested_with.json gh-badges/.github/badges/${{ env.VERSION_TAG }}/tested_with.json
          cd gh-badges

          git config user.name "${{ github.workflow }} by ${{ github.actor }}"
          git config user.email "${{ secrets.COMMIT_EMAIL_ADDRESS }}"

          # Only proceed with commit and push if changes are detected
          if [[ $(git add .github/badges/* --dry-run | wc -l) -gt 0 ]]; then
            git add .github/badges/*
            git commit -m "Update tested with badge for release"
            git push -f
          else
            echo "Nothing to commit"
          fi

      # (Re)tag the repo so that the updated files are included in the release tag
      - name: Update tag
        if: always()
        continue-on-error: true
        run: |
          git config user.name "${{ github.workflow }} by ${{ github.actor }}"
          git config user.email "${{ secrets.COMMIT_EMAIL_ADDRESS }}"

          # Delete the existing tag locally and remotely if it already exists
          if git rev-parse --verify "refs/tags/${{ env.VERSION_TAG }}" > /dev/null 2>&1; then
            # Delete the existing tag locally and remotely only if it exists
            git tag -d "${{ env.VERSION_TAG }}"
            git push origin --delete "${{ env.VERSION_TAG }}"
          else
            echo "Tag '${{ env.VERSION_TAG }}' does not exist, skipping deletion."
          fi

          # Recreate the tag with a message, including [skip-ci] to prevent triggering CI workflows
          git tag -a "${{ env.VERSION_TAG }}" -m "Release ${{ env.VERSION_TAG }} [skip-ci]" 

          # Push the new tag to the remote repository
          git push origin "${{ env.VERSION_TAG }}"

      # Create the release
      - name: Create GitHub release
        uses: ncipollo/release-action@v1
        with:
          draft: true        
          artifacts: "releases/openMINDS_MATLAB_${{ env.versionNumber }}.mltbx"
          tag: ${{ env.VERSION_TAG }}
          generateReleaseNotes: true
          body: "![MATLAB Versions Tested](https://img.shields.io/endpoint?url=https%3A%2F%2Fraw.githubusercontent.com%2FopenMetadataInitiative%2FopenMINDS_MATLAB%2Fgh-badges%2F.github%2Fbadges%2F${{ env.VERSION_TAG }}%2Ftested_with.json)"
