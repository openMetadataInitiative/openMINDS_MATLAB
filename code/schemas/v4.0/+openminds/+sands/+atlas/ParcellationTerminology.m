classdef ParcellationTerminology < openminds.abstract.Schema
%ParcellationTerminology - No description available.
%
%   PROPERTIES:
%
%   dataLocation       : (1,:) <a href="matlab:help openminds.core.data.File" style="font-weight:bold">File</a>
%                        Add the location of all files in which this parcellation terminology is stored.
%
%   hasEntity          : (1,:) <a href="matlab:help openminds.sands.atlas.ParcellationEntity" style="font-weight:bold">ParcellationEntity</a>
%                        Add all parcellation entities which belong to this parcellation terminology.
%
%   ontologyIdentifier : (1,:) string
%                        Enter the internationalized resource identifiers (IRIs) to the related ontological terms matching this parcellation terminology.

%   This class was auto-generated by the openMINDS pipeline

    properties
        % Add the location of all files in which this parcellation terminology is stored.
        dataLocation (1,:) openminds.core.data.File ...
            {mustBeListOfUniqueItems(dataLocation)}

        % Add all parcellation entities which belong to this parcellation terminology.
        hasEntity (1,:) openminds.sands.atlas.ParcellationEntity ...
            {mustBeListOfUniqueItems(hasEntity)}

        % Enter the internationalized resource identifiers (IRIs) to the related ontological terms matching this parcellation terminology.
        ontologyIdentifier (1,:) string ...
            {mustBeListOfUniqueItems(ontologyIdentifier)}
    end

    properties (Access = protected)
        Required = ["hasEntity"]
    end

    properties (Constant, Hidden)
        X_TYPE = "https://openminds.om-i.org/types/ParcellationTerminology"
    end

    properties (Constant, Hidden)
        LINKED_PROPERTIES = struct(...
            'dataLocation', "openminds.core.data.File", ...
            'hasEntity', "openminds.sands.atlas.ParcellationEntity" ...
        )
        EMBEDDED_PROPERTIES = struct(...
        )
    end

    methods
        function obj = ParcellationTerminology(varargin)
            obj@openminds.abstract.Schema(varargin{:})
        end
    end

    methods (Access = protected)
        function str = getDisplayLabel(obj)
            str = obj.createLabelForMissingLabelDefinition();
        end
    end
end