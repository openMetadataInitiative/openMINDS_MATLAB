classdef LocalFile < openminds.abstract.Schema
%LocalFile - Structured information about a file that is not accessible via a URL.
%
%   PROPERTIES:
%
%   contentDescription : (1,1) string
%                        Enter a short content description for this local file instance.
%
%   copyOf             : (1,1) <a href="matlab:help openminds.core.File" style="font-weight:bold">File</a>
%                        Add the file of which this is a copy.
%
%   dataType           : (1,:) <a href="matlab:help openminds.controlledterms.DataType" style="font-weight:bold">DataType</a>
%                        Add all data types that are specifically represented in this local file instance.
%
%   format             : (1,1) <a href="matlab:help openminds.core.ContentType" style="font-weight:bold">ContentType</a>
%                        Add the content type of this local file instance.
%
%   hash               : (1,1) <a href="matlab:help openminds.core.Hash" style="font-weight:bold">Hash</a>
%                        Add the hash that was generated for this local file instance.
%
%   name               : (1,1) string
%                        Enter the name of this local file instance.
%
%   path               : (1,1) string
%                        Enter the file system path (absolute path or relative to the working directory) to this local file instance.
%
%   specialUsageRole   : (1,1) <a href="matlab:help openminds.controlledterms.FileUsageRole" style="font-weight:bold">FileUsageRole</a>
%                        Add the special usage role of this local file instance.
%
%   storageSize        : (1,1) <a href="matlab:help openminds.core.QuantitativeValue" style="font-weight:bold">QuantitativeValue</a>
%                        Enter the storage size of this local file instance.

%   This class was auto-generated by the openMINDS pipeline

    properties
        % Enter a short content description for this local file instance.
        contentDescription (1,1) string

        % Add the file of which this is a copy.
        copyOf (1,:) openminds.core.File ...
            {mustBeSpecifiedLength(copyOf, 0, 1)}

        % Add all data types that are specifically represented in this local file instance.
        dataType (1,:) openminds.controlledterms.DataType ...
            {mustBeListOfUniqueItems(dataType)}

        % Add the content type of this local file instance.
        format (1,:) openminds.core.ContentType ...
            {mustBeSpecifiedLength(format, 0, 1)}

        % Add the hash that was generated for this local file instance.
        hash (1,:) openminds.core.Hash ...
            {mustBeSpecifiedLength(hash, 0, 1)}

        % Enter the name of this local file instance.
        name (1,1) string

        % Enter the file system path (absolute path or relative to the working directory) to this local file instance.
        path (1,1) string

        % Add the special usage role of this local file instance.
        specialUsageRole (1,:) openminds.controlledterms.FileUsageRole ...
            {mustBeSpecifiedLength(specialUsageRole, 0, 1)}

        % Enter the storage size of this local file instance.
        storageSize (1,:) openminds.core.QuantitativeValue ...
            {mustBeSpecifiedLength(storageSize, 0, 1)}
    end

    properties (Access = protected)
        Required = ["name", "path"]
    end

    properties (Constant, Hidden)
        X_TYPE = "https://openminds.ebrains.eu/computation/LocalFile"
    end

    properties (Constant, Hidden)
        LINKED_PROPERTIES = struct(...
            'copyOf', "openminds.core.File", ...
            'dataType', "openminds.controlledterms.DataType", ...
            'format', "openminds.core.ContentType", ...
            'specialUsageRole', "openminds.controlledterms.FileUsageRole" ...
        )
        EMBEDDED_PROPERTIES = struct(...
            'hash', "openminds.core.Hash", ...
            'storageSize', "openminds.core.QuantitativeValue" ...
        )
    end

    methods
        function obj = LocalFile(varargin)
            obj@openminds.abstract.Schema(varargin{:})
        end
    end

    methods (Access = protected)
        function str = getDisplayLabel(obj)
            str = obj.name;
        end
    end

end