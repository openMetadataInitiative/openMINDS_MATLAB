classdef AmountOfChemical < openminds.abstract.Schema
%AmountOfChemical - Structured information about the amount of a given chemical that was used.
%
%   PROPERTIES:
%
%   amount          : (1,1) <a href="matlab:help openminds.core.QuantitativeValue" style="font-weight:bold">QuantitativeValue</a>
%                     When used in a mixture, enter the amount of the substance within the mixture (e.g., as concentration or as ratio). When used in its pure state, enter the used amount of the substance.
%
%   chemicalProduct : (1,1) <a href="matlab:help openminds.chemicals.ChemicalMixture" style="font-weight:bold">ChemicalMixture</a>, <a href="matlab:help openminds.chemicals.ChemicalSubstance" style="font-weight:bold">ChemicalSubstance</a>, <a href="matlab:help openminds.controlledterms.MolecularEntity" style="font-weight:bold">MolecularEntity</a>
%                     Add the chemical product that was used.

%   This class was auto-generated by the openMINDS pipeline

    properties
        % When used in a mixture, enter the amount of the substance within the mixture (e.g., as concentration or as ratio). When used in its pure state, enter the used amount of the substance.
        amount (1,:) openminds.core.QuantitativeValue ...
            {mustBeSpecifiedLength(amount, 0, 1)}

        % Add the chemical product that was used.
        chemicalProduct (1,:) openminds.internal.mixedtype.amountofchemical.ChemicalProduct ...
            {mustBeSpecifiedLength(chemicalProduct, 0, 1)}
    end

    properties (Access = protected)
        Required = ["chemicalProduct"]
    end

    properties (Constant, Hidden)
        X_TYPE = "https://openminds.ebrains.eu/chemicals/AmountOfChemical"
    end

    properties (Constant, Hidden)
        LINKED_PROPERTIES = struct(...
            'chemicalProduct', ["openminds.chemicals.ChemicalMixture", "openminds.chemicals.ChemicalSubstance", "openminds.controlledterms.MolecularEntity"] ...
        )
        EMBEDDED_PROPERTIES = struct(...
            'amount', "openminds.core.QuantitativeValue" ...
        )
    end

    methods
        function obj = AmountOfChemical(varargin)
            obj@openminds.abstract.Schema(varargin{:})
        end
    end

    methods (Access = protected)
        function str = getDisplayLabel(obj)
            str = '<missing name>';
        end
    end

end