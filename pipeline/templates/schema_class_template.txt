classdef {{ class_name }} < {{base_class}}
%{{ class_name }} - {{docstring}}
%
%   PROPERTIES: {# Create description for each property of schema #}
%
    {%- for prop in props %}
%   {{ prop.name ~ " " * (max_property_name_length - prop.name|length) }} : {{prop.size_doc}} {{prop.type_doc}}
%   {{ " " * (max_property_name_length+2) }} {{prop.doc}}
    {%- if not loop.last%}
%       {# Add blank line to separate each property #}
    {%- endif -%}
    {%- endfor %}

%   This class was auto-generated by the openMINDS pipeline

    properties {# Define each of the properties of this schema #}
    {%- for prop in props %}
        % {{ prop.doc }}
        {{ prop.name }} {{prop.size}} {{ prop.type }} {%- if prop.validators%} ...{% endif %}
        {%- if prop.validators %}
            {{prop.validators}}
        {%- endif -%}
    {%- if not loop.last -%}
        {{ ' ' }}    {# Add blank line to separate each property #}
    {% endif %}
    {%- endfor %}
    end

    properties (Access = protected)
        Required = [{% for name in required_properties -%} "{{ name }}" {%- if not loop.last%}, {% endif -%} {% endfor %}]
    end

    properties (Constant, Hidden)
        X_TYPE = "{{openminds_type}}"
    end

    properties (Constant, Hidden)  {# List all properties with linked or embedded types #}
        LINKED_PROPERTIES = struct(...
            {%- for prop in linked_types %}
            '{{prop["name"]}}', {{prop["types"]}} {%- if not loop.last %}, {% else %} {% endif -%} ...
            {%- endfor %}
        )
        EMBEDDED_PROPERTIES = struct(...
            {%- for prop in embedded_types %}
            '{{prop["name"]}}', {{prop["types"]}} {%- if not loop.last %}, {% else %} {% endif -%} ...
            {%- endfor %}
        )
    end

    methods
        function obj = {{ class_name }}(varargin)            
            obj@openminds.abstract.Schema(varargin{:})
        end
    end
    
    methods (Access = protected)
        function str = getDisplayLabel(obj)
            {{display_label_method_expression}}
        end
    end
    
end
